I"n1<h1 id="install"><a href="">install</a></h1>

<h2 id="학습">학습</h2>
<ul>
  <li>데이터 과학</li>
  <li>Hadoop 준비</li>
</ul>

<h2 id="실습">실습</h2>
<ul>
  <li>Vitural Box 설치
    <ul>
      <li>https://www.virtualbox.org/ -&gt; Download -&gt; Vitural Box Old builds</li>
    </ul>
  </li>
  <li>Vagrant 설치
    <ul>
      <li>https://www.vagrantup.com/ -&gt; download -&gt; download older version of Vagrant 다운로드로 이동 (default install) -&gt; Vagrant_2.2.2_x86_64.msi  다운로드</li>
      <li>설치를 마치면 C:\HashiCorp\Vagrant 폴더 생성됨</li>
      <li>cmd를 관리자모드 실행, C:\HashiCorp&gt; vagrant  init</li>
      <li>C:\HashiCorp\Vagrant에 생성된 Vagrantfile의 모든 내용을 제거하고 다음을 추가
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.insert_key = false
  config.vm.define :nn01 do |nn01_config|
 nn01_config.vm.box = "centos/7"
 nn01_config.vm.hostname = "nn01"
 nn01_config.vm.network "private_network", ip: "192.168.56.101"
 nn01_config.vm.provider :virtualbox do |vb|
     vb.name = "nn01"
     vb.memory = "4096"
 end
  end
  config.vm.define :dn01 do |dn01_config|
 dn01_config.vm.box = "centos/7"
 dn01_config.vm.hostname = "dn01"
 dn01_config.vm.network "private_network", ip: "192.168.56.102"
 dn01_config.vm.provider :virtualbox do |vb|
     vb.name = "dn01"
     vb.memory = "4096"
 end
  end
config.vm.define :dn02 do |dn02_config|
 dn02_config.vm.box = "centos/7"
 dn02_config.vm.hostname = "dn02"
 dn02_config.vm.network "private_network", ip: "192.168.56.103"
 dn02_config.vm.provider :virtualbox do |vb|
     vb.name = "dn02"
     vb.memory = "4096"
 end
  end
end
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>가상머신 기동
    <ul>
      <li>Vagrantfile이 존재하는 경로로 이동 후 vagrant 실행</li>
      <li>C:\HashiCorp vagrant up</li>
      <li>VirtualBox에 nn01, dn01, dn02 서버가 만들어진다. (시간이 소요)
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\컴퓨터이름\VirtualBox VMs\nn01
C:\Users\컴퓨터이름\VirtualBox VMs\dn01
C:\Users\컴퓨터이름\VirtualBox VMs\dn02
C:\HashiCorp_vagraint\.vagrant\machines\nn01
C:\HashiCorp_vagraint\.vagrant\machines\dn01
C:\HashiCorp_vagraint\.vagrant\machines\dn02
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>접속
    <ul>
      <li>Oracle VM VirtualBox을 관리자권한으로 실행하면 nn01/dn01/dn02 가상머신이 생김</li>
      <li>화면에 엔터를 치고</li>
      <li>login : root/vagrant, vagrant/vagrant</li>
      <li>2개의 계정이 만들어져 있는데 우선 root 계정으로 접속 확인</li>
      <li>각 노드의 아이피 확인 CentOS 7의 최소 설치로 되어 ifconfig 명령을 쓰려면 yum install net-tools을 하면 되나 우선 ip addr 로 확인
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nn01 : 192.168.56.101
dn01 : 192.168.56.102
dn02 : 192.168.56.103
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>putty 접속
    <ul>
      <li>https://putty.ko.softonic.com/ -&gt; putty-0.70-installer.msi  다운받아 설치</li>
      <li>실행
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>192.168.56.101  nn01  <span class="o">[</span>Save]버튼
192.168.56.102  dn01  <span class="o">[</span>Save]버튼
192.168.56.103  dn02  <span class="o">[</span>Save]버튼
</code></pre></div>        </div>
      </li>
      <li>putty 에서 ip와 port 저장하고 열기하면</li>
      <li>login : vagrant/vagrant, root/vagrant</li>
      <li>ssh접속시 비밀번호없이 로그인 가능</li>
      <li>그러나 putty접속 오류</li>
      <li>이를 가능하게 하려면 다음을 수정
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]vi /etc/ssh/sshd_config (/Password를 검색한다.)
2) PasswordAuthentication no를 PasswordAuthentication yes로 변경 (설정을 수정하면 항상 다시 들어가서 확인하기)
3) [root@nn01 ~]systemctl restart sshd
</code></pre></div>        </div>
      </li>
      <li>putty접속이 가능하다 dn01, dn02에도 같은 작업
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@dn01 ~]vi /etc/ssh/sshd_config
2) [root@dn01 ~]systemctl restart sshd
3) [root@dn02 ~]vi /etc/ssh/sshd_config
4) [root@dn02 ~]systemctl restart sshd
</code></pre></div>        </div>
      </li>
      <li>putty 접속을 확인</li>
    </ul>
  </li>
  <li>MobaXterm 확인
    <ul>
      <li>설치 작업을 편리하게 해주는 도구(Putty 세션을 동기화 함)</li>
      <li>https://mobaxterm.mobatek.net &gt; 왼쪽 메뉴 &gt; download</li>
      <li>다운 받아 zip 파일을 품</li>
      <li>실행하면 Putty의 세션이 자동으로 로드</li>
      <li>왼쪽에 Putty Sessions에 putty 연결이 들어온거 확인하고 하나씩 눌러놓고 MultiExec 을 클릭</li>
    </ul>
  </li>
  <li>패키지 추가
    <ul>
      <li>yum update(패키지 업데이트)</li>
      <li>yum install telnet svn git nc ntp wget vim net-tools(자주 쓰는 프로그램 설치)</li>
      <li>systemctl stop firewalld, systemctl disable firewalld(방화벽 끄기)</li>
    </ul>
  </li>
  <li>Master, Slave 역할
    <ul>
      <li>확인
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nn01 <span class="o">=</span> Master <span class="o">(</span>NameNode, SecondaryNamenode, ResourceManager<span class="o">)</span>
dn01 <span class="o">=</span> Slave <span class="o">(</span>DataNode, NodeManager<span class="o">)</span>
dn02 <span class="o">=</span> Slave <span class="o">(</span>DataNode, NodeManager<span class="o">)</span>
</code></pre></div>        </div>
      </li>
      <li>nn01, dn01, dn02 각각에서 JDK의 압축을 해제하고 설치하고 설정</li>
      <li>mobaTerm으로 반복 동작을 줄일 수 있음</li>
      <li>hadoop 사용자를 위한 java를 설치할 예정이니, hadoop 계정으로 로그인</li>
      <li>모든 사용자를 위한 java를 설치할 예정이니, root 계정으로 로그인</li>
      <li>설치되었는지 확인하기
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ which java
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>protobuf 설치
    <ul>
      <li>설치 전 필요 툴(root 계정에서)
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ yum install -y autoconf automake libtool curl gcc-c++ unzip
</code></pre></div>        </div>
      </li>
      <li>다운로드
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ cd /tmp
2) [root@nn01 ~]$ wget https://github.com/protocolbuffers/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.gz
3) [root@nn01 ~]$ tar -zxvf protobuf-2.5.0.tar.gz
4) [root@nn01 ~]$ mv protobuf-2.5.0  /opt/
</code></pre></div>        </div>
      </li>
      <li>
        <p>이동되었는지 확인</p>
      </li>
      <li>설치(protobuf 폴더로 이동)
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ ./configure
2) [root@nn01 ~]$ make (여기서 에러가 발생하면 ./configure에서 안되는 것임)
3) [root@nn01 ~]$ make install
</code></pre></div>        </div>
      </li>
      <li>확인
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ protoc --version (만일 에러 발생시 lfconfig 후 다시 protoc --version)
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>JDK 8 설치(nn01, dn01, dn02)
    <ul>
      <li>설치
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ cd /tmp
2) [root@nn01 ~]$ yum install -y vim wget unzip
3) [root@nn01 ~]$ wget --no-check-certificate --no-cookies - --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz (Local에 이미 다운로드 한 경우 Winscp를 이용하여 업로드)
4) [root@nn01 ~]$ ls jdk*
5) [root@nn01 ~]$ tar -xvzpf jdk-8u131-linux-x64.tar.gz
6) [root@nn01 ~]$ mkdir -p /opt/jdk/1.8.0_131
7) [root@nn01 ~]$ mv jdk1.8.0_131/* /opt/jdk/1.8.0_131/
8) [root@nn01 ~]$ ln -s /opt/jdk/1.8.0_131 /opt/jdk/current
9) [root@nn01 ~]$ install java with alternatives (에러)
</code></pre></div>        </div>
      </li>
      <li>alternatives 자바 설정
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ alternatives --install /usr/bin/java java /opt/jdk/1.8.0_131/bin/java 2
2) [root@nn01 ~]$ alternatives --config java
3) [root@nn01 ~]$ Enter to keep the current selection[+], or type selection number:1
</code></pre></div>        </div>
      </li>
      <li>alternatives 추가 설정
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ alternatives --install /usr/bin/jar jar /opt/jdk/1.8.0_131/bin/jar 2
2) [root@nn01 ~]$ alternatives --install /usr/bin/javac javac /opt/jdk/1.8.0_131/bin/javac 2
3) [root@nn01 ~]$ alternatives --set jar /opt/jdk/1.8.0_131/bin/jar
4) [root@nn01 ~]$ alternatives --set javac /opt/jdk/1.8.0_131/bin/javac
</code></pre></div>        </div>
      </li>
      <li>자바 버전 확인
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ java -version
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Hadoop
    <ul>
      <li>설치
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ cd /tmp
2) [root@nn01 ~]$ wget http://apache.tt.co.kr/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz
3) [root@nn01 ~]$ tar -xvzf hadoop-2.7.7.tar.gz
4) [root@nn01 ~]$ mkdir -p /opt/hadoop/2.7.7
5) [root@nn01 ~]$ mv hadoop-2.7.7/* /opt/hadoop/2.7.7/
6) [root@nn01 ~]$ ln -s /opt/hadoop/2.7.7 /opt/hadoop/current
</code></pre></div>        </div>
      </li>
      <li>사용자 추가
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [root@nn01 ~]$ useradd hadoop
2) [root@nn01 ~]$ passwd hadoop (비밀번호도 hadoop 으로 - 비밀번호 입력시는 글자표시 안됨)
3) [root@nn01 ~]$ chown -R hadoop:hadoop /opt/hadoop/ (루트에서 만든 파일의 권한을 hadoop에게 권함)
4) [root@nn01 ~]$ su - hadoop
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="정리">정리</h2>
<ul>
  <li>Vagrant
    <ul>
      <li>경량화된 Virtual machine 관리 서비스입니다. OS를 직접 하나씩 설치하지 않고 단순히 이미지 형태로 OS를 설치할 수 있다는 것을 말합니다. 그래서 Vagrant를 이용하기 위해서는 가상머신이 설치되어 있어야 합니다. 참고로 default는 virtual box입니다.</li>
    </ul>
  </li>
  <li>WinSCP
    <ul>
      <li>Windows용 그래픽 유저 인터페이스 SFTP 및 FTP 클라이언트 프로그램이고 오픈소스 프리웨어입니다. 이 프로그램을 사용하여 로컬 컴퓨터와 원격 컴퓨터 간에 안전하게 파일을 복사할 수 있습니다.</li>
      <li>https://winscp.net/eng/download.php -&gt; WinSCP-5.15-Setup.exe</li>
    </ul>
  </li>
  <li>protobuf
    <ul>
      <li>구글에서 공개한 오픈소스 직렬화 라이브러리입니다. 프로토콜 버퍼는 데이터를 연속된 비트로 만들고, 이렇게 만들어진 비트를 해석해 원래의 데이터를 만들 수도 있습니다. 현재 다양한 시스템이 이기종 혹은 내부 프로세스 간의 통신에 프로토콜 버퍼를 사용하고 있으며, 하둡2도 내부 데몬 간의 데이터 통신을 위해 프로토콜 버퍼를 적용했습니다.</li>
    </ul>
  </li>
  <li>alternatives
    <ul>
      <li>centos의 wget을 통해 java를 install하게 되면 버젼관리 대상으로 들어갑니다. 그리고 centos는 버젼관리를 위한 명령어를 제공하는데 그것이 바로 alternatives라는 명령어입니다.</li>
    </ul>
  </li>
</ul>
:ET