I"<9<h1 id="pig"><a href="">pig</a></h1>

<h2 id="학습">학습</h2>
<ul>
  <li>pig 이해</li>
</ul>

<h2 id="실습">실습</h2>
<ul>
  <li>설정
    <ul>
      <li>mapred-site.xml 설정
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1<span class="o">)</span> <span class="o">[</span>hadoop@nn01 ~]<span class="nv">$ </span>vi <span class="nv">$HADOOP_HOME</span>/etc/hadoop/mapred-site.xml
<span class="c">########## mapred-site.xml ##########</span>
<span class="c"># &lt;property&gt;</span>
<span class="c"># &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span>
<span class="c"># &lt;value&gt;nn01:10020&lt;/value&gt;</span>
<span class="c"># &lt;/property&gt;</span>
<span class="c">########## mapred-site.xml ##########</span>
2<span class="o">)</span> <span class="o">[</span>hadoop@nn01 ~]<span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$HADOOP_HOME</span>/etc/hadoop
3<span class="o">)</span> <span class="o">[</span>hadoop@nn01 hadoop]<span class="nv">$ </span>scp mapred-site.xml hadoop@dn01:/opt/hadoop/current/etc/hadoop
4<span class="o">)</span> <span class="o">[</span>hadoop@nn01 hadoop]<span class="nv">$ </span>scp mapred-site.xml hadoop@dn02:/opt/hadoop/current/etc/hadoop
</code></pre></div>        </div>
      </li>
      <li>dn01, dn02의 mapred-site.xml 확인하기
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [hadoop@dn01 ~]$ vi $HADOOP_HOME/etc/hadoop/mapred-site.xml
2) [hadoop@dn02 ~]$ vi $HADOOP_HOME/etc/hadoop/mapred-site.xml
</code></pre></div>        </div>
      </li>
      <li>stop, start 하기
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [hadoop@nn01 hadoop]$ stop-all.sh
2) [hadoop@nn01 hadoop]$ start-all.sh
3) [hadoop@nn01 hadoop]$ jps
</code></pre></div>        </div>
      </li>
      <li>historyserve 하기(mapreduce 가능하기위해)
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1<span class="o">)</span> <span class="o">[</span>hadoop@nn01 hadoop]<span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$HADOOP_HOME</span>/sbin
2<span class="o">)</span> <span class="o">[</span>hadoop@nn01 sbin]<span class="nv">$ </span>mr-jobhistory-daemon.sh start historyserver
3<span class="o">)</span> <span class="o">[</span>hadoop@nn01 sbin]<span class="nv">$ </span>jps
<span class="c">########## jps ##########</span>
29812 NameNode
30166 ResourceManager
30473 JobHistoryServer
30010 SecondaryNameNode
30510 Jps
<span class="c">########## jps ##########</span>
</code></pre></div>        </div>
      </li>
      <li>mapreduce 접속
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [hadoop@dn01 ~]$ pig -x mapreduce
2) grunt&gt; groceries = load 'hdfs://nn01:9000/input/pig_data/groceries.csv' using PigStorage(',');
3) grunt&gt; dump groceries
4) grunt&gt; store groceries into '/output/pig_data/store_dir' using PigStorage();
</code></pre></div>        </div>
      </li>
      <li>output 확인
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [hadoop@dn02 ~]$ ssh dn01
2) [hadoop@dn01 ~]$ hdfs dfs -ls /output/pig_data/store_dir
3) [hadoop@dn01 ~]$ hdfs dfs -cat /output/pig_data/store_dir/part-m-00000
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>스키마 구조
    <ul>
      <li>groceries.csv 처리
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [hadoop@dn01 ~]$ pig -x local
2) grunt&gt; groceries = load 'file:///home/hadoop/pig_data/groceries.csv' using PigStorage(',')
as (
order_id:chararray,
location:chararray,
product:chararray,
day:datetime,
revenue:double);
3) grunt&gt; describe groceries;
4) grunt&gt; products = foreach groceries generate location, product, day;
5) grunt&gt; dump products
6) grunt&gt; store products into 'file:///home/hadoop/pig_data/output/store_dir' using PigStorage();
</code></pre></div>        </div>
      </li>
      <li>처리 확인
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) [hadoop@dn02 ~]$ ssh dn01
2) [hadoop@dn01 ~]$ ls /home/hadoop/pig_data/output/store_dir
3) [hadoop@dn01 ~]$ cat /home/hadoop/pig_data/output/store_dir
</code></pre></div>        </div>
      </li>
      <li>limit 확인
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; groceries_sub = limit groceries 5;
2) grunt&gt; dump groceries_sub
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>복합 자료형
    <ul>
      <li>student_subjects.txt 처리
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; student_subjects = load 'file:///home/hadoop/pig_data/data/student_subjects.txt' 
as (
student_id:chararray,
name:chararray,
grade:int,
subject1:chararray,
subject2:chararray,
subject3:chararray);
2) dump student_subjects
</code></pre></div>        </div>
      </li>
      <li>bag 처리
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; student_subjects2 = foreach student_subjects generate name, TOBAG(subject1, subject2, subject3) as subject;
2) grunt&gt; student_subject3 = foreach student_subjects2 generate subject;
3) dump student_subjects3
</code></pre></div>        </div>
      </li>
      <li>student_marks.txt
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; student_marks = load 'file:///home/hadoop/pig_data/data/student_marks.txt'
as (
student_id:chararray,
name:chararray,
grade:int,
marks:map[int]);
2) grunt&gt; student_marks2 = foreach student_marks generate name, marks#'Math';
3) grunt&gt; dump student_marks2
</code></pre></div>        </div>
      </li>
      <li>map 처리
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; student_marks3 = foreach student_marks generate student_id, TOMAP(name, grade);
2) grunt&gt; dump student_marks3
</code></pre></div>        </div>
      </li>
      <li>students.txt 처리
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; students = load 'file:///home/hadoop/pig_data/data/students.txt'
as (
stu_id:chararray,
name:chararray,
grade:int,
contact:tuple(addr:chararray, tel:chararray));
2) grunt&gt; dump student
</code></pre></div>        </div>
      </li>
      <li>tuple 처리
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; students2 = foreach students generate name, contact.tel;
2) grunt&gt; dump students2
</code></pre></div>        </div>
      </li>
      <li>flatten 처리(tuple을 풀어줌)
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; students3 = foreach student generate stu_id, name, grade, flatten(contact);
2) grunt&gt; dump students3
</code></pre></div>        </div>
      </li>
      <li>wordcount 처리
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; A = load 'file:///opt/hadoop/current/README.txt';
2) grunt&gt; dump A
3) grunt&gt; B = foreach A generate flatten(TOKENIZE((chararray)$0)) as word;
4) grunt&gt; dump B
5) grunt&gt; C = group B by word;
6) grunt&gt; dump C
7) grunt&gt; D = foreach C generate group as word, COUNT($1) as count;
8) grunt&gt; dump D 
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Function
    <ul>
      <li>orders.json
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; orders = load 'file:///home/hadoop/pig_data/data/orders.json' using JsonLoader('
order_id:chararray, 
username:chararray, 
product:chararray, 
quantity:int, 
amount:double, 
order_date:chararray, 
zipcode:chararray');
2) grunt&gt; dump orders
3) grunt&gt; orders2 = foreach orders generate username, product, quantity*amount as total;
4) grunt&gt; dump orders2
</code></pre></div>        </div>
      </li>
      <li>ROUND() 함수
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; orders2 = foreach orders generate ROUND(quantity*amount) as total
</code></pre></div>        </div>
      </li>
      <li>SUBSTING() 함수
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; orders2 = foreach orders generate SUBSTRING(order_id, 1, 3);
</code></pre></div>        </div>
      </li>
      <li>REPLACE 함수
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; orders2 = foreach orders generate REPLACE(order_id,'o', 'order');
</code></pre></div>        </div>
      </li>
      <li>주문번호로 정렬
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; result = order orders by order_id DESC;
</code></pre></div>        </div>
      </li>
      <li>총가격 순으로 정렬하고 상위 5개 출력
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; result = foreach orders generate product, username, ROUND(quantity*amount) as total;
2) grunt&gt; result2 = order result by total DESC;
3) grunt&gt; result3 = limit result2 5; 
</code></pre></div>        </div>
      </li>
      <li>주문 날짜의 월단위로 정렬(getMonth() 함수)
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; result = foreach orders generate product, username, ToDate(order_date, 'MM-dd-yyyy') as date;
2) grunt&gt; result2 = foreach result generate product, username, GetMonth(date) as month;
3) grunt&gt; result3 = order result2 by month;
4) grunt&gt; dump result3
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Filter
    <ul>
      <li>수량이 없는 튜플 제외하기
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; result = filter orders by quantity &gt; 0;
</code></pre></div>        </div>
      </li>
      <li>주문번호가 ‘o4’이상인 튜플들 추출
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; result2 = filter result by order_id &gt;= 'o4';
</code></pre></div>        </div>
      </li>
      <li>상품명이 ‘tv’로 끝나는 튜플들 추출
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; result = filter orders by product matches '.*tv';
</code></pre></div>        </div>
      </li>
      <li>상품명이 ‘speakers’가 포함된 튜플들 추출
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; result = filter orders by product matches '.*speakers';
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Split
    <ul>
      <li>개수가 1인 bag와 1초과인 bag으로 나누기
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; split orders into result_1 if(quantity == 1), result_more if(quantity &gt; 1);
2) grunt&gt; dump result_1
3) grunt&gt; dump result_more
</code></pre></div>        </div>
      </li>
      <li>사용자명이 있는 bag와 사용자명이 없는 bag으로 나누기
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; split orders into result_notnull if(username is not null), result_null if(username is null);
2) grunt&gt; dump result_notnull;
3) grunt&gt; dump result_null;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Distinct(중복제거)
    <ul>
      <li>orders_duplicates.json
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; rep_orders = load 'file:///home/hadoop/pig_data/data/orders_duplicates.json' using JsonLoader('
order_id: chararray,
username: chararray,
product: chararray,
quantity: int,
amount: double,
order_date: chararray,
zipcode: chararray');
2) grunt&gt; dump rep_orders;
3) grunt&gt; result = distinct rep_orders;
4) grunt&gt; dump result;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Join
    <ul>
      <li>emp.csv 파일 로드하여 변수 emp 저장
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; emp = load 'file:///home/hadoop/pig_data/data/emp/emp.csv' using PigStorage(',');
</code></pre></div>        </div>
      </li>
      <li>dept.csv 파일 로드하여 변수 dept 저장
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; dept = load 'file:///home/hadoop/pig_data/data/emp/dept.csv' using PigStorage(',');
</code></pre></div>        </div>
      </li>
      <li>두 bag을 조인하기
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; emp_join = JOIN emp BY $7, dept BY $2;
</code></pre></div>        </div>
      </li>
      <li>조인 bag에서 월급이 2000 초과한 내역을 월급순으로 정렬하여 출력(filter 이용)
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1) grunt&gt; emp_join = JOIN emp BY $7, dept BY $2;
2) grunt&gt; result = FILTER emp_join BY $5 &gt; 2000;
3) grunt&gt; result2 = ORDER result BY $5 DESC;
4) grunt&gt; dump result2;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="정리">정리</h2>
<ul>
  <li>Pig 명령어
    <ul>
      <li>DUMP : 결과를 화면에 출력 가능</li>
      <li>STORE : 결과를 파일로 저장 가능</li>
      <li>DESCRIBE : 데이터 구조에 대한 정보를 보여줌</li>
    </ul>
  </li>
  <li>FOREACH
    <ul>
      <li>필요한 컬럼들만 결과로 만들기</li>
    </ul>
  </li>
  <li>DISTINCT
    <ul>
      <li>Bag안에 중복 튜플들을 삭제</li>
    </ul>
  </li>
  <li>LIMI
    <ul>
      <li>출력되는 튜플의 개수 제한</li>
    </ul>
  </li>
  <li>스키마
    <ul>
      <li>스카마가 없으면 describe 구조 없음, 컬럼을 $숫자로 추출</li>
      <li>스키마가 있으면 describe 구조 확인, 컬럼명으로 추출</li>
    </ul>
  </li>
  <li>복합자료형
    <ul>
      <li>bag</li>
      <li>map</li>
      <li>tuple</li>
    </ul>
  </li>
</ul>
:ET